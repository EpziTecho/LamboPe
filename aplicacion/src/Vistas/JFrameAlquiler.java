/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Controladores.Calquiler;
import Reporte.conexion;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.net.URL;
import java.sql.Date;
import java.util.Calendar;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 * JFrame de Alquiler del Programa.
 * Está clase contiene los constructores y métodos de creación de la Vista
 * de JFrame de Alquiler. Este frame se llama desde el Escritorio del programa.
 * Esta ventana tiene por función mostrar una tabla con la lista de Alquiler
 * y unos botones para añadirlos, editarlos o borrarlos.
 * @author grupo2
 */
public class JFrameAlquiler extends javax.swing.JFrame {

    private Calquiler controladorAlquilers;
    private String dniTrabajador;
    private String nombreTrabajador;
    private String apellidosTrabajador;

    /**
     * Creates new form JFrameExtras
     */
    public JFrameAlquiler() {
        initComponents();
        
        //Declaracion del titulo
         this.setTitle("Alquiler");
        // Declaramos el degault operation para que al cerrar la ventana no salga de la aplicación
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);  
        
        // Hacemos que cuando se inicie ocupe toda la pantalla
        this.setExtendedState(MAXIMIZED_BOTH);
        
        controladorAlquilers = new Calquiler(this);

        controladorAlquilers.rellenaTablaAlquiler();
        ocultarColumnas();
        jLabelTotalRegistros.setText("Total Registros " + controladorAlquilers.getTotalregistros());

    }
    
    /**
     * Constructor para crear uno nuevo pasando parámetros dni, nombre y apellidos
     * @param dni
     * @param nombre
     * @param apellidos
     */
    public JFrameAlquiler(String dni, String nombre, String apellidos) {
        initComponents();
        
        // Declaramos el degault operation para que al cerrar la ventana no salga de la aplicación
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);  
        
        // Hacemos que cuando se inicie ocupe toda la pantalla
        this.setExtendedState(MAXIMIZED_BOTH);
        
        controladorAlquilers = new Calquiler(this);

        controladorAlquilers.rellenaTablaAlquiler();
        ocultarColumnas();
        jLabelTotalRegistros.setText("Total Registros " + controladorAlquilers.getTotalregistros());
        
        //asignamos valores a las variables definidas al principio con los parametros pasados desde el Inicio.
        dniTrabajador = dni;
        nombreTrabajador = nombre;
        apellidosTrabajador = apellidos;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableListaAlquileres = new javax.swing.JTable();
        jLabelTotalRegistros = new javax.swing.JLabel();
        jLabelBuscar = new javax.swing.JLabel();
        jButtonBuscar = new javax.swing.JButton();
        jButtonEditar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jButtonSalir = new javax.swing.JButton();
        jButtonNuevo = new javax.swing.JButton();
        jDateChooserBuscar = new com.toedter.calendar.JDateChooser();
        jButtonRealizarPago = new javax.swing.JButton();
        jButtonVerPago = new javax.swing.JButton();
        infoPDF = new javax.swing.JButton();
        jLabelExtras = new javax.swing.JLabel();
        jMenuExtras = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(57, 92, 120));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTableListaAlquileres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableListaAlquileres);

        jLabelTotalRegistros.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTotalRegistros.setText("Total de Registros:");

        jLabelBuscar.setForeground(new java.awt.Color(255, 255, 255));
        jLabelBuscar.setText("Buscar:");

        jButtonBuscar.setBackground(new java.awt.Color(255, 232, 66));
        jButtonBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Archivos/buscar.png"))); // NOI18N
        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jButtonEditar.setBackground(new java.awt.Color(255, 232, 66));
        jButtonEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Archivos/nuevo.png"))); // NOI18N
        jButtonEditar.setText("Editar");
        jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarActionPerformed(evt);
            }
        });

        jButtonEliminar.setBackground(new java.awt.Color(255, 232, 66));
        jButtonEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Archivos/borrar.png"))); // NOI18N
        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jButtonSalir.setBackground(new java.awt.Color(255, 232, 66));
        jButtonSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Archivos/cancelar.png"))); // NOI18N
        jButtonSalir.setText("Salir");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        jButtonNuevo.setBackground(new java.awt.Color(255, 232, 66));
        jButtonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Archivos/nuevo2.png"))); // NOI18N
        jButtonNuevo.setText("Nuevo");
        jButtonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuevoActionPerformed(evt);
            }
        });

        jButtonRealizarPago.setBackground(new java.awt.Color(255, 232, 66));
        jButtonRealizarPago.setText("Generar Factura");
        jButtonRealizarPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRealizarPagoActionPerformed(evt);
            }
        });

        jButtonVerPago.setBackground(new java.awt.Color(255, 232, 66));
        jButtonVerPago.setText("Ver");
        jButtonVerPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerPagoActionPerformed(evt);
            }
        });

        infoPDF.setBackground(new java.awt.Color(255, 232, 66));
        infoPDF.setText("Reportes PDF");
        infoPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoPDFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonRealizarPago, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonVerPago, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(infoPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelTotalRegistros)
                .addGap(73, 73, 73))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabelBuscar)
                .addGap(50, 50, 50)
                .addComponent(jDateChooserBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonBuscar)
                .addGap(41, 41, 41)
                .addComponent(jButtonNuevo)
                .addGap(40, 40, 40)
                .addComponent(jButtonEditar)
                .addGap(40, 40, 40)
                .addComponent(jButtonEliminar)
                .addGap(40, 40, 40)
                .addComponent(jButtonSalir)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooserBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonEliminar)
                        .addComponent(jButtonEditar)
                        .addComponent(jButtonBuscar)
                        .addComponent(jLabelBuscar)
                        .addComponent(jButtonSalir)
                        .addComponent(jButtonNuevo)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTotalRegistros)
                    .addComponent(jButtonRealizarPago)
                    .addComponent(jButtonVerPago)
                    .addComponent(infoPDF))
                .addGap(5, 5, 5))
        );

        jLabelExtras.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelExtras.setForeground(new java.awt.Color(255, 255, 255));
        jLabelExtras.setText("Alquileres");
        setJMenuBar(jMenuExtras);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelExtras)
                        .addGap(0, 885, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabelExtras, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed

        controladorAlquilers.setTotalregistros(0);
        controladorAlquilers.buscarAlquiler(getFechaBuscar());
        jLabelTotalRegistros.setText("Total Registros " + controladorAlquilers.getTotalregistros());

    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed

        try {
            controladorAlquilers.editarAlquiler();
            jLabelTotalRegistros.setText("Total Registros " + controladorAlquilers.getTotalregistros());
        } catch (NullPointerException npe) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos");
        }

    }//GEN-LAST:event_jButtonEditarActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed

        int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "Va a eliminar una Alquiler ¿Está seguro?",
                "Eliminar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);
        if (confirmacion == 0) {
            controladorAlquilers.borraAlquiler();
            jLabelTotalRegistros.setText("Total Registros " + controladorAlquilers.getTotalregistros());
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void jButtonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuevoActionPerformed
        
        // Creamos un nuevo JDialog de tipo Vehiculo
        JDialog dialog = new JDAlquiler(dniTrabajador, nombreTrabajador, apellidosTrabajador, true, JFrameAlquiler.this, true);
        // Creamos un WindowListener, que no hará más que escuchar para un posible evento de ventana
        dialog.addWindowListener(new WindowAdapter() {
            @Override
            //llamamos al metodo windowClosed que hará algo cuando la ventana que escuchamos se cierre, en este caso el JDialog
            public void windowClosed(WindowEvent evt) {
                // El metodo rellenatabla actualizará la tabla
                controladorAlquilers.rellenaTablaAlquiler();
                ocultarColumnas();
                jLabelTotalRegistros.setText("Total Registros " + controladorAlquilers.getTotalregistros());
            }
        });
        // hacemos visible la ventana JDClientes
        dialog.setVisible(true);  
        
    }//GEN-LAST:event_jButtonNuevoActionPerformed

    private void jButtonRealizarPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRealizarPagoActionPerformed
 
        try {
            controladorAlquilers.realizarfactura();
        } catch (NullPointerException npe) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos");
            npe.printStackTrace();
        }
        
    }//GEN-LAST:event_jButtonRealizarPagoActionPerformed

    private void jButtonVerPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerPagoActionPerformed
     
        try {
            controladorAlquilers.verfactura();
        } catch (NullPointerException npe) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos");
            npe.printStackTrace();
        }  
        
    }//GEN-LAST:event_jButtonVerPagoActionPerformed

    private void infoPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoPDFActionPerformed
       /* String informedestino= ("C:\\Users\\Epzi\\Desktop\\FacturasHertz\\Alquilers.pdf");
           conexion cn= new conexion();
        try {
            cn.conn();
        } catch (Exception ex) {
           System.out.print(ex);
        }
        URL archivo = this.getClass().getResource("/Reporte/Alquilers.jasper");
        JasperReport jr= null;
      
        try {
            jr = (JasperReport) JRLoader.loadObject(archivo);
            JasperPrint jp=JasperFillManager.fillReport(jr,null,conexion.getConn());
            JasperViewer jv= new JasperViewer(jp);
            jv.setVisible(true);
            jv.setTitle("visor de reportes");
            JasperExportManager.exportReportToPdfFile(jp,informedestino);
        } catch (JRException ex) {
           System.out.print(ex);
        }*/
    }//GEN-LAST:event_infoPDFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameAlquiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameAlquiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameAlquiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameAlquiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameAlquiler().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton infoPDF;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonEditar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonNuevo;
    private javax.swing.JButton jButtonRealizarPago;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JButton jButtonVerPago;
    private com.toedter.calendar.JDateChooser jDateChooserBuscar;
    private javax.swing.JLabel jLabelBuscar;
    private javax.swing.JLabel jLabelExtras;
    private javax.swing.JLabel jLabelTotalRegistros;
    private javax.swing.JMenuBar jMenuExtras;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableListaAlquileres;
    // End of variables declaration//GEN-END:variables

    /**
     * Método que oculta la columna de la id de Alquiler, dni de cliente y dni de trabajador 
     * puesto que el usuario no debe de poder editar dichos campos de nuestro registro.
     */
    public void ocultarColumnas() {
        jTableListaAlquileres.getColumnModel().getColumn(0).setMaxWidth(0);
        jTableListaAlquileres.getColumnModel().getColumn(0).setMinWidth(0);
        jTableListaAlquileres.getColumnModel().getColumn(0).setPreferredWidth(0);
        
        jTableListaAlquileres.getColumnModel().getColumn(3).setMaxWidth(0);
        jTableListaAlquileres.getColumnModel().getColumn(3).setMinWidth(0);
        jTableListaAlquileres.getColumnModel().getColumn(3).setPreferredWidth(0);
        
        jTableListaAlquileres.getColumnModel().getColumn(5).setMaxWidth(0);
        jTableListaAlquileres.getColumnModel().getColumn(5).setMinWidth(0);
        jTableListaAlquileres.getColumnModel().getColumn(5).setPreferredWidth(0);
        
        jTableListaAlquileres.getColumnModel().getColumn(7).setMaxWidth(0);
        jTableListaAlquileres.getColumnModel().getColumn(7).setMinWidth(0);
        jTableListaAlquileres.getColumnModel().getColumn(7).setPreferredWidth(0);
        
    }

    /**
     * Tenemos también un método get por si necesitamos que nos devuelva el
     * modelo.
     *
     * @return modelo de la tabla
     */
    public TableModel getTMJTableAlquiler() {
        return jTableListaAlquileres.getModel();
    }

    /**
     * Desde el controlador enviamos el modelo por defecto de la tabla.
     *
     * @param tm
     */
    public void setTMJTableAlquiler(TableModel tm) {
        jTableListaAlquileres.setModel(tm);
    }
    
    /**
     * Tranforma a tipo fecha la fecha que devuelve el tipo jCalendar
     * @return 
     */
    
    public Date getFechaBuscar() {
        Calendar cal;
        int d, m, a;
        cal = jDateChooserBuscar.getCalendar();
        d = cal.get(Calendar.DAY_OF_MONTH);
        m = cal.get(Calendar.MONTH);
        a = cal.get(Calendar.YEAR) -1900;
        
        return new Date (a,m,d);    
    }

    /**
     * Metodo que nos devuelve la fila que hemos seleccionado en la tabla. En
     * caso de no seleccionar fila muestra error.
     *
     * @return devuelve la fila seleccionada, menos uno si no se ha seleccionado
     */
    public int getFilaSeleccionada() {

        if (jTableListaAlquileres.getSelectedRowCount() > 0) {
            return jTableListaAlquileres.getSelectedRow();
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione al menos una fila", "Error", JOptionPane.ERROR_MESSAGE);
            return -1;
        }
    }

    /**
     * Este método recoge los datos extraidos de la tabla en el controlador y
     * los envia hacia un JDialog nuevo. Además añade un listener para que
     * cuando se cierre la ventana segun hayamos programado repintará la tabla
     *
     *
     * @param idalquiler
     * @param matricula
     * @param modelo
     * @param nyapCliente
     * @param dniCliente
     * @param nyapTrabajador
     * @param idExtra
     * @param nombreExtra
     * @param estado
     * @param tipoTarifa
     * @param fechaAlquiler
     * @param fechaRecogida
     * @param fechaDevolucion
     * @param dniTrabajador
     * @param costoAlquiler
     */
    public void abreEditarAlquiler(int idalquiler, String matricula, String modelo, String dniCliente, String nyapCliente, String dniTrabajador, String nyapTrabajador, int idExtra, String nombreExtra, String tipoTarifa, Date fechaAlquiler, Date fechaRecogida, Date fechaDevolucion, double costoAlquiler, String estado) {
        // Creamos un nuevo JDialog de tipo extra
        JDialog dialog = new JDAlquiler(idalquiler, matricula, modelo, dniCliente, nyapCliente, dniTrabajador, nyapTrabajador, idExtra, nombreExtra, tipoTarifa, fechaAlquiler, fechaRecogida, fechaDevolucion, costoAlquiler, estado, JFrameAlquiler.this, true);
        // Creamos un WindowListener, que no hará más que escuchar para un posible evento de ventana
        dialog.addWindowListener(new WindowAdapter() {
            @Override
            //llamamos al metodo windowClosed que hará algo cuando la ventana que escuchamos se cierre, en este caso el JDialog
            public void windowClosed(WindowEvent evt) {
                // El metodo rellenatabla actualizará la tabla
                controladorAlquilers.rellenaTablaAlquiler();
                ocultarColumnas();
            }
        });
        // hacemos visible la ventana JDClientes
        dialog.setVisible(true);
    }
    
    /**
     * Método que abre una nueva ventana de JDFactura pasandole los parámetros 
 al constructor definido en el JDFactura para ello
     * @param idalquiler 
     */
     public void abreRealizarfactura(int idalquiler) {
        // Creamos un nuevo JDialog de tipo extra
        JDialog dialog = new JDFactura(idalquiler, JFrameAlquiler.this, true);
        // Creamos un WindowListener, que no hará más que escuchar para un posible evento de ventana
        dialog.addWindowListener(new WindowAdapter() {
            @Override
            //llamamos al metodo windowClosed que hará algo cuando la ventana que escuchamos se cierre, en este caso el JDialog
            public void windowClosed(WindowEvent evt) {
                // El metodo rellenatabla actualizará la tabla
                controladorAlquilers.rellenaTablaAlquiler();
                ocultarColumnas();
            }
        });
        // hacemos visible la ventana JDClientes
        dialog.setVisible(true);
    }
     
     /**
      * Método que abre un nuevo JDFactura para ver los facturas de una Alquiler
      * @param idalquiler 
      */
     
     public void abreVerfactura(int idalquiler) {
        // Creamos un nuevo JDialog de tipo extra
        JDialog dialog = new JDFactura(idalquiler, true, JFrameAlquiler.this, true);
        // Creamos un WindowListener, que no hará más que escuchar para un posible evento de ventana
        dialog.addWindowListener(new WindowAdapter() {
            @Override
            //llamamos al metodo windowClosed que hará algo cuando la ventana que escuchamos se cierre, en este caso el JDialog
            public void windowClosed(WindowEvent evt) {
                // El metodo rellenatabla actualizará la tabla
                controladorAlquilers.rellenaTablaAlquiler();
                ocultarColumnas();
            }
        });
        // hacemos visible la ventana JDClientes
        dialog.setVisible(true);
    }
    
    /**
     * Método que muestra una excepción de sql
     */
    public void muestraExcepcionSQL() {
        JOptionPane.showMessageDialog(this, "Error en introducción de datos SQL", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Método que muestra un mensaje en caso de que no haya registros en la fecha seleccionada
     */
    public void muestraExcepcionAlquilerNula() {
        JOptionPane.showMessageDialog(this, "No se ha encontrado una Alquiler en dicha fecha de recogida", "Error en la busqueda", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Método que muestra un mensaje en caso de que no se pueda realizar un factura porque el estado de la Alquiler
     * no es En Alquiler
     */
    public void muestraExcepcionNoPuedeRealizar() {
        JOptionPane.showMessageDialog(this, "No se puede realizar un factura puesto que la Alquiler no está En Alquiler", "Error al Realizar factura", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Método que muestra un mensaje en caso de que no se pueda realizar un factura porque el estado de la Alquiler
     * no es En Alquiler
     */
    public void muestraExcepcionNoPuedeRealizar2() {
        JOptionPane.showMessageDialog(this, "No se puede ver una factura de cuya Alquiler aún no ha sido pagada", "Error al Ver factura", JOptionPane.ERROR_MESSAGE);
    }

}
